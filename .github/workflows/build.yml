name: Release

on:
  push:
    tags:
      - v*
  workflow_dispatch:

permissions: write-all

jobs:
  Release:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        arch: [x64]
        include:
          - os: macos-latest
            arch: arm64

    runs-on: ${{ matrix.os }}
    env:
      XVFB_PFX: ${{ (matrix.os == 'ubuntu-latest' && 'xvfb-run --auto-servernum -- ') || '' }}

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'yarn'

      - name: Install build essentials (macOS)
        if: matrix.os == 'macos-latest'
        run: brew install rpm

      - name: Install deps
        run: ${{ env.XVFB_PFX }}yarn

      - name: Rebuild native dependencies for current architecture
        run: |
          ${{ env.XVFB_PFX }}npm rebuild --arch=${{ matrix.arch }}
          ${{ env.XVFB_PFX }}./node_modules/.bin/electron-rebuild --arch=${{ matrix.arch }}

      - name: Build Electron app (without auto-publish)
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.github_token }}
          ARCH: ${{ matrix.arch }}
        run: yarn build --${{ matrix.arch }} -p never

      # Windows artifacts
      - uses: actions/upload-artifact@v4
        if: matrix.os == 'windows-latest'
        with:
          name: VutronMusic-win-installer-${{ matrix.arch }}
          path: release/*/VutronMusic*_${{ matrix.arch }}.exe
          if-no-files-found: ignore

      - uses: actions/upload-artifact@v4
        if: matrix.os == 'windows-latest'
        with:
          name: VutronMusic-win-portable-${{ matrix.arch }}
          path: release/*/VutronMusic*_${{ matrix.arch }} Portable.exe
          if-no-files-found: ignore

      - uses: actions/upload-artifact@v4
        if: matrix.os == 'windows-latest'
        with:
          name: VutronMusic-win-blockmap-${{ matrix.arch }}
          path: release/*/VutronMusic*.blockmap
          if-no-files-found: ignore

      - uses: actions/upload-artifact@v4
        if: matrix.os == 'windows-latest'
        with:
          name: VutronMusic-win-latest-${{ matrix.arch }}
          path: release/*/latest*.yml
          if-no-files-found: ignore

      # macOS artifacts
      - uses: actions/upload-artifact@v4
        if: matrix.os == 'macos-latest'
        with:
          name: VutronMusic-mac-dmg-${{ matrix.arch }}
          path: release/*/VutronMusic*_${{ matrix.arch }}.dmg
          if-no-files-found: ignore

      - uses: actions/upload-artifact@v4
        if: matrix.os == 'macos-latest'
        with:
          name: VutronMusic-mac-zip-${{ matrix.arch }}
          path: release/*/VutronMusic*_${{ matrix.arch }}.zip
          if-no-files-found: ignore

      - uses: actions/upload-artifact@v4
        if: matrix.os == 'macos-latest'
        with:
          name: VutronMusic-mac-blockmap-${{ matrix.arch }}
          path: release/*/VutronMusic*.blockmap
          if-no-files-found: ignore

      - uses: actions/upload-artifact@v4
        if: matrix.os == 'macos-latest'
        with:
          name: VutronMusic-mac-latest-${{ matrix.arch }}
          path: release/*/latest*.yml
          if-no-files-found: ignore

      # Linux artifacts
      - uses: actions/upload-artifact@v4
        if: matrix.os == 'ubuntu-latest'
        with:
          name: VutronMusic-linux-snap-${{ matrix.arch }}
          path: release/*/VutronMusic*.snap
          if-no-files-found: ignore

      - uses: actions/upload-artifact@v4
        if: matrix.os == 'ubuntu-latest'
        with:
          name: VutronMusic-linux-AppImage-${{ matrix.arch }}
          path: release/*/VutronMusic*.AppImage
          if-no-files-found: ignore

      - uses: actions/upload-artifact@v4
        if: matrix.os == 'ubuntu-latest'
        with:
          name: VutronMusic-linux-deb-${{ matrix.arch }}
          path: release/*/VutronMusic*.deb
          if-no-files-found: ignore

      - uses: actions/upload-artifact@v4
        if: matrix.os == 'ubuntu-latest'
        with:
          name: VutronMusic-linux-rpm-${{ matrix.arch }}
          path: release/*/VutronMusic*.rpm
          if-no-files-found: ignore

      - uses: actions/upload-artifact@v4
        if: matrix.os == 'ubuntu-latest'
        with:
          name: VutronMusic-linux-zip-${{ matrix.arch }}
          path: release/*/VutronMusic*.zip
          if-no-files-found: ignore

      - uses: actions/upload-artifact@v4
        if: matrix.os == 'ubuntu-latest'
        with:
          name: VutronMusic-linux-blockmap-${{ matrix.arch }}
          path: release/*/VutronMusic*.blockmap
          if-no-files-found: ignore

      - uses: actions/upload-artifact@v4
        if: matrix.os == 'ubuntu-latest'
        with:
          name: VutronMusic-linux-latest-${{ matrix.arch }}
          path: release/*/latest*.yml
          if-no-files-found: ignore

  # 添加新的发布作业，等所有构建完成后统一上传到 GitHub Release
  publish-release:
    needs: [Release]
    runs-on: ubuntu-latest
    name: Upload to GitHub Release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts

      - name: Display structure of downloaded files
        run: ls -R all-artifacts

      - name: Flatten all artifacts into upload folder
        run: |
          mkdir -p upload
          find all-artifacts -type f -exec cp {} upload/ \;

      - name: Create release tag if triggered by workflow_dispatch
        if: github.event_name == 'workflow_dispatch'
        run: |
          DATE_TAG=$(date +'%Y%m%d%H%M')
          echo "RELEASE_TAG=v-draft-${DATE_TAG}" >> $GITHUB_ENV

      - name: Set tag from git tag if available
        if: github.event_name == 'push'
        run: |
          echo "RELEASE_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Upload all files to GitHub Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.github_token }}
        with:
          files: upload/*
          draft: true
          prerelease: false
          tag_name: ${{ env.RELEASE_TAG }}
